import os
import datetime
from systemsformat import InitLuaParser, SystemFromJson
from schema import CONTENTS_SCHEMA, SYSTEM_SCHEMA

DEFAULT_SYSTEMS_PATH = '../../data/systems/'


class UnknownSystem(Exception):
    pass


BANNER = """
-- Copyright Â© 2008-2018 Pioneer Developers. See AUTHORS.txt for details
-- Licensed under the terms of the GPL v3. See licenses/GPL-3.txt

-- This file was autogenerated by Systems Editor at %s
-- To edit it, consider running scripts/data_editor/main.py

"""


def FollowSelector(data, schema):
    selector = schema.get('selector', schema['id'])
    if not isinstance(selector, tuple):
        selector = (selector, )
    for term in selector:
        if data is None:
            pass
        elif isinstance(term, str) and hasattr(data, term):
            data = getattr(data, term)
        else:
            data = data[term]
    return data


def PopulateFieldsFromSchema(data, schema):
    res = {}
    for x in schema:
        if 'subfields' in x:
            res[x['id']] = PopulateFieldsFromSchema(
                (FollowSelector(data, x)
                 if x.get('dive') else data), x['subfields'])
            continue
        d = FollowSelector(data, x)
        typ = x.get('type', x['format'])
        if hasattr(d, 'to_%s' % typ):
            d = getattr(d, 'to_%s' % typ)()
        res[x['id']] = d
    return res


def PopulateFromSchema(data, root_schema, section):
    schema = root_schema[section]
    if 'columns' in schema and isinstance(data, list):
        res = []
        for x in data:
            res.append(PopulateFromSchema(x, root_schema, section))
        return res
    if data is None:
        return None
    res = {}
    if 'columns' in schema:
        res.update(PopulateFieldsFromSchema(data, schema['columns']))
    if 'fields' in schema:
        res.update(PopulateFieldsFromSchema(data, schema['fields']))
    if 'subsections' in schema:
        for x in schema['subsections']:
            d = FollowSelector(data, x)
            res[x['id']] = PopulateFromSchema(d, root_schema, x['schema'])
    return res


class SystemsSet:
    def __init__(self):
        self.systems = []
        self.dirty_files = set()

    def AddSystem(self, system):
        self.systems.append(system)

    def LoadFromDir(self, rootdir):
        for root, dirs, files in os.walk(rootdir):
            for file in sorted(files):
                if not file.endswith('.lua'):
                    continue
                f = os.path.join(root, file)
                filename = f[len(rootdir):]
                print(filename)
                x = InitLuaParser(filename=filename, systems_set=self)
                x.Parse(f)

    def SaveToDir(self, rootdir=DEFAULT_SYSTEMS_PATH, dirty_only=True):
        file_to_systems = {}
        for x in self.systems:
            file_to_systems.setdefault(x.filename, []).append(x)

        for file, systems in file_to_systems.items():
            if dirty_only and file not in self.dirty_files:
                continue
            self.dirty_files.remove(file)
            filename = os.path.join(rootdir, file)
            os.makedirs(os.path.dirname(filename), exist_ok=True)
            with open(filename, "w") as f:
                f.write(BANNER % str(datetime.date.today()))
                for x in systems:
                    lines = x.DumpLua()
                    cat_lines = ''.join([y.strip() for y in lines])
                    if len(cat_lines) < 120:
                        f.write(cat_lines + '\n')
                    else:
                        f.write('\n'.join(lines) + '\n\n')
        for file in self.dirty_files:
            filename = os.path.join(rootdir, file)
            if os.path.isfile(filename):
                os.remove(filename)

    def GetContents(self):
        data = PopulateFromSchema(self.systems, CONTENTS_SCHEMA, 'systems')
        return {'data': {'systems': data}, 'schema': CONTENTS_SCHEMA}

    def GetSystem(self, file, system):
        for x in self.systems:
            if x.filename == file and x.name == system:
                return x
        else:
            raise UnknownSystem

    def UpdateSystem(self, id, data):
        file = id.get('filename')
        name = id.get('name')
        if file:
            self.dirty_files.add(file)
        if data['system'].get('filename'):
            self.dirty_files.add(data['system']['filename'])

        if file or name:
            for i, x in enumerate(self.systems):
                if x.filename == file and x.name == name:
                    self.systems[i] = SystemFromJson(data)
                    return
        self.systems.append(SystemFromJson(data))

    def DeleteSystem(self, id):
        file = id.get('filename')
        name = id.get('name')
        for i, x in enumerate(self.systems):
            if x.filename == file and x.name == name:
                if file:
                    self.dirty_files.add(file)
                self.systems.pop(i)
                return

    def __str__(self):
        return "%d systems: %s" % (
            len(self.systems),
            ', '.join(['%s:%s' % (x.filename, x.name) for x in self.systems]))


def GetSystemsSet(path=DEFAULT_SYSTEMS_PATH):
    x = SystemsSet()
    x.LoadFromDir(path)
    return x


def SystemToJson(x):
    sysprops = PopulateFromSchema(x, SYSTEM_SCHEMA, 'system')
    root_body = None
    if x.star:
        root_body = PopulateFromSchema([x.star], SYSTEM_SCHEMA, 'bodies')

    return {
        'data': {
            'system': sysprops,
            'bodies': root_body,
        },
        'schema': SYSTEM_SCHEMA
    }